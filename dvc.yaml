stages:
  get_bdb_2024_data:
    cmd: kaggle competitions download -c nfl-big-data-bowl-2024 -p data/
    outs:
    - data/nfl-big-data-bowl-2024.zip

  unzip_bdb_2024_data:
    cmd: unzip data/nfl-big-data-bowl-2024.zip -d data/bdb_2024/
    deps:
    - data/nfl-big-data-bowl-2024.zip
    outs:
    - data/bdb_2024

  prep_data:
    cmd: uv run python src/prep_data.py
    deps:
    - src/prep_data.py
    - data/bdb_2024/
    outs:
    - data/split_prepped_data/

  precompute_datasets: # this might take an hour or 2
    cmd: uv run python src/datasets.py
    deps:
    - src/datasets.py
    - data/split_prepped_data/
    outs:
    - data/datasets/:
        persist: true

  train_zoo_models:
    cmd: uv run python src/train.py --model_type zoo --device 0

    deps:
    - src/train.py
    - src/datasets.py
    - src/models.py
    - data/datasets/zoo/
    outs:
    - data/models/zoo/:
        persist: true
        cache: true

  train_transformer_models:
    cmd: uv run python src/train.py --model_type transformer --device 1

    deps:
    - src/train.py
    - src/datasets.py
    - src/models.py
    - data/datasets/transformer
    outs:
    - data/models/transformer/:
        persist: true
        cache: true

  pick_best_models:
    cmd: uv run python src/pick_best_models.py

    deps:
    - src/pick_best_models.py
    - src/datasets.py
    - src/models.py

    - data/models/
    outs:
    - data/best_models/:
        cache: false
        persist: false
artifacts:
  best_zoo_model:
    path: models/best_models/zoo/best_model.ckpt
    type: model
    desc: 'Best The Zoo Architecture Model'
    meta:
      framework: pytorch-lightning
  
  best_transformer_model:
    path: models/best_models/transformer/best_model.ckpt
    type: model
    desc: 'Best Transformer Architecture Model'
    meta:
      framework: pytorch-lightning